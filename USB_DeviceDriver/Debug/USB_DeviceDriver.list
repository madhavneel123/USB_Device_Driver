
USB_DeviceDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001c4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000388  08000390  00010390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000388  08000388  00010390  2**0
                  CONTENTS
  4 .ARM          00000000  08000388  08000388  00010390  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000388  08000390  00010390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000388  08000388  00010388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800038c  0800038c  0001038c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000390  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000390  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010390  2**0
                  CONTENTS, READONLY
 12 .debug_info   000003ee  00000000  00000000  000103c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000144  00000000  00000000  000107ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000070  00000000  00000000  000108f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000048  00000000  00000000  00010968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018aae  00000000  00000000  000109b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000aa4  00000000  00000000  0002945e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a8a7  00000000  00000000  00029f02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b47a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000a0  00000000  00000000  000b47fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000370 	.word	0x08000370

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000370 	.word	0x08000370

08000204 <main>:
 */

#include "usbdd_framework.h"

int main(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
    /* Loop forever */
	//USB_Initialize();
	for(;;);
 8000208:	e7fe      	b.n	8000208 <main+0x4>
	...

0800020c <Configure_Clock>:
//AHB prescaler = 1
//APB prescaler = 2 APB prescaler2 = 1
//MCO1 prescaler = 2

static void Configure_Clock(void)
{
 800020c:	b480      	push	{r7}
 800020e:	af00      	add	r7, sp, #0
	FLASH -> ACR |= 0x02;
 8000210:	4b2b      	ldr	r3, [pc, #172]	; (80002c0 <Configure_Clock+0xb4>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a2a      	ldr	r2, [pc, #168]	; (80002c0 <Configure_Clock+0xb4>)
 8000216:	f043 0302 	orr.w	r3, r3, #2
 800021a:	6013      	str	r3, [r2, #0]

	//Enable HSE
	RCC -> CR |= (1 << 16);
 800021c:	4b29      	ldr	r3, [pc, #164]	; (80002c4 <Configure_Clock+0xb8>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a28      	ldr	r2, [pc, #160]	; (80002c4 <Configure_Clock+0xb8>)
 8000222:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000226:	6013      	str	r3, [r2, #0]

	//wait until HSE is stable
	while(!((RCC -> CR) | ~(1 << 17)));
 8000228:	bf00      	nop
 800022a:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <Configure_Clock+0xb8>)
 800022c:	681b      	ldr	r3, [r3, #0]

	//Configure PLL Source HSE, SYSCLK = 72MHz
	//M = 4
	RCC -> PLLCFGR |= (0x04 << 0);
 800022e:	4b25      	ldr	r3, [pc, #148]	; (80002c4 <Configure_Clock+0xb8>)
 8000230:	685b      	ldr	r3, [r3, #4]
 8000232:	4a24      	ldr	r2, [pc, #144]	; (80002c4 <Configure_Clock+0xb8>)
 8000234:	f043 0304 	orr.w	r3, r3, #4
 8000238:	6053      	str	r3, [r2, #4]
	//N = 72
	RCC -> PLLCFGR |= (0x48 << 6);
 800023a:	4b22      	ldr	r3, [pc, #136]	; (80002c4 <Configure_Clock+0xb8>)
 800023c:	685b      	ldr	r3, [r3, #4]
 800023e:	4a21      	ldr	r2, [pc, #132]	; (80002c4 <Configure_Clock+0xb8>)
 8000240:	f443 5390 	orr.w	r3, r3, #4608	; 0x1200
 8000244:	6053      	str	r3, [r2, #4]
	//P = 2
	RCC -> PLLCFGR |= (0x02 << 16);
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <Configure_Clock+0xb8>)
 8000248:	685b      	ldr	r3, [r3, #4]
 800024a:	4a1e      	ldr	r2, [pc, #120]	; (80002c4 <Configure_Clock+0xb8>)
 800024c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000250:	6053      	str	r3, [r2, #4]
	//Q = 3
	RCC -> PLLCFGR |= (0x03 << 24);
 8000252:	4b1c      	ldr	r3, [pc, #112]	; (80002c4 <Configure_Clock+0xb8>)
 8000254:	685b      	ldr	r3, [r3, #4]
 8000256:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <Configure_Clock+0xb8>)
 8000258:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 800025c:	6053      	str	r3, [r2, #4]
	//SRC = 2
	RCC -> PLLCFGR |= (0x02 << 22);
 800025e:	4b19      	ldr	r3, [pc, #100]	; (80002c4 <Configure_Clock+0xb8>)
 8000260:	685b      	ldr	r3, [r3, #4]
 8000262:	4a18      	ldr	r2, [pc, #96]	; (80002c4 <Configure_Clock+0xb8>)
 8000264:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000268:	6053      	str	r3, [r2, #4]

	//Enable PLL Module. Always enable PLL after configuration
	RCC -> CR |= (1 << 24);
 800026a:	4b16      	ldr	r3, [pc, #88]	; (80002c4 <Configure_Clock+0xb8>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	4a15      	ldr	r2, [pc, #84]	; (80002c4 <Configure_Clock+0xb8>)
 8000270:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000274:	6013      	str	r3, [r2, #0]

	//Wait until PLL is stable
	while(!(RCC -> CR |= ~(1 << 25)));
 8000276:	bf00      	nop
 8000278:	4b12      	ldr	r3, [pc, #72]	; (80002c4 <Configure_Clock+0xb8>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a11      	ldr	r2, [pc, #68]	; (80002c4 <Configure_Clock+0xb8>)
 800027e:	f063 7300 	orn	r3, r3, #33554432	; 0x2000000
 8000282:	6013      	str	r3, [r2, #0]

	//Switches system clock to PLL
	RCC -> CFGR |= (0b10 << 0);
 8000284:	4b0f      	ldr	r3, [pc, #60]	; (80002c4 <Configure_Clock+0xb8>)
 8000286:	689b      	ldr	r3, [r3, #8]
 8000288:	4a0e      	ldr	r2, [pc, #56]	; (80002c4 <Configure_Clock+0xb8>)
 800028a:	f043 0302 	orr.w	r3, r3, #2
 800028e:	6093      	str	r3, [r2, #8]

	//Configure PRE1
	RCC -> CFGR |= (0b101 << 10);
 8000290:	4b0c      	ldr	r3, [pc, #48]	; (80002c4 <Configure_Clock+0xb8>)
 8000292:	689b      	ldr	r3, [r3, #8]
 8000294:	4a0b      	ldr	r2, [pc, #44]	; (80002c4 <Configure_Clock+0xb8>)
 8000296:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800029a:	6093      	str	r3, [r2, #8]

	//Wait until PLL is used
	while((RCC -> CFGR & 0x0C) != 0x08);
 800029c:	bf00      	nop
 800029e:	4b09      	ldr	r3, [pc, #36]	; (80002c4 <Configure_Clock+0xb8>)
 80002a0:	689b      	ldr	r3, [r3, #8]
 80002a2:	f003 030c 	and.w	r3, r3, #12
 80002a6:	2b08      	cmp	r3, #8
 80002a8:	d1f9      	bne.n	800029e <Configure_Clock+0x92>

	//Disable HSI - To save power. We are using HSE
	RCC -> CR &= ~(1 << 0);
 80002aa:	4b06      	ldr	r3, [pc, #24]	; (80002c4 <Configure_Clock+0xb8>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	4a05      	ldr	r2, [pc, #20]	; (80002c4 <Configure_Clock+0xb8>)
 80002b0:	f023 0301 	bic.w	r3, r3, #1
 80002b4:	6013      	str	r3, [r2, #0]

}
 80002b6:	bf00      	nop
 80002b8:	46bd      	mov	sp, r7
 80002ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002be:	4770      	bx	lr
 80002c0:	40023c00 	.word	0x40023c00
 80002c4:	40023800 	.word	0x40023800

080002c8 <SystemInit>:

void SystemInit(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
	Configure_Clock();
 80002cc:	f7ff ff9e 	bl	800020c <Configure_Clock>
}
 80002d0:	bf00      	nop
 80002d2:	bd80      	pop	{r7, pc}

080002d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002d4:	480d      	ldr	r0, [pc, #52]	; (800030c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002d6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002d8:	f7ff fff6 	bl	80002c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002dc:	480c      	ldr	r0, [pc, #48]	; (8000310 <LoopForever+0x6>)
  ldr r1, =_edata
 80002de:	490d      	ldr	r1, [pc, #52]	; (8000314 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002e0:	4a0d      	ldr	r2, [pc, #52]	; (8000318 <LoopForever+0xe>)
  movs r3, #0
 80002e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e4:	e002      	b.n	80002ec <LoopCopyDataInit>

080002e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ea:	3304      	adds	r3, #4

080002ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002f0:	d3f9      	bcc.n	80002e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002f2:	4a0a      	ldr	r2, [pc, #40]	; (800031c <LoopForever+0x12>)
  ldr r4, =_ebss
 80002f4:	4c0a      	ldr	r4, [pc, #40]	; (8000320 <LoopForever+0x16>)
  movs r3, #0
 80002f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002f8:	e001      	b.n	80002fe <LoopFillZerobss>

080002fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002fc:	3204      	adds	r2, #4

080002fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000300:	d3fb      	bcc.n	80002fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000302:	f000 f811 	bl	8000328 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000306:	f7ff ff7d 	bl	8000204 <main>

0800030a <LoopForever>:

LoopForever:
    b LoopForever
 800030a:	e7fe      	b.n	800030a <LoopForever>
  ldr   r0, =_estack
 800030c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000310:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000314:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000318:	08000390 	.word	0x08000390
  ldr r2, =_sbss
 800031c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000320:	2000001c 	.word	0x2000001c

08000324 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000324:	e7fe      	b.n	8000324 <ADC_IRQHandler>
	...

08000328 <__libc_init_array>:
 8000328:	b570      	push	{r4, r5, r6, lr}
 800032a:	4d0d      	ldr	r5, [pc, #52]	; (8000360 <__libc_init_array+0x38>)
 800032c:	4c0d      	ldr	r4, [pc, #52]	; (8000364 <__libc_init_array+0x3c>)
 800032e:	1b64      	subs	r4, r4, r5
 8000330:	10a4      	asrs	r4, r4, #2
 8000332:	2600      	movs	r6, #0
 8000334:	42a6      	cmp	r6, r4
 8000336:	d109      	bne.n	800034c <__libc_init_array+0x24>
 8000338:	4d0b      	ldr	r5, [pc, #44]	; (8000368 <__libc_init_array+0x40>)
 800033a:	4c0c      	ldr	r4, [pc, #48]	; (800036c <__libc_init_array+0x44>)
 800033c:	f000 f818 	bl	8000370 <_init>
 8000340:	1b64      	subs	r4, r4, r5
 8000342:	10a4      	asrs	r4, r4, #2
 8000344:	2600      	movs	r6, #0
 8000346:	42a6      	cmp	r6, r4
 8000348:	d105      	bne.n	8000356 <__libc_init_array+0x2e>
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000350:	4798      	blx	r3
 8000352:	3601      	adds	r6, #1
 8000354:	e7ee      	b.n	8000334 <__libc_init_array+0xc>
 8000356:	f855 3b04 	ldr.w	r3, [r5], #4
 800035a:	4798      	blx	r3
 800035c:	3601      	adds	r6, #1
 800035e:	e7f2      	b.n	8000346 <__libc_init_array+0x1e>
 8000360:	08000388 	.word	0x08000388
 8000364:	08000388 	.word	0x08000388
 8000368:	08000388 	.word	0x08000388
 800036c:	0800038c 	.word	0x0800038c

08000370 <_init>:
 8000370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000372:	bf00      	nop
 8000374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000376:	bc08      	pop	{r3}
 8000378:	469e      	mov	lr, r3
 800037a:	4770      	bx	lr

0800037c <_fini>:
 800037c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800037e:	bf00      	nop
 8000380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000382:	bc08      	pop	{r3}
 8000384:	469e      	mov	lr, r3
 8000386:	4770      	bx	lr
